

```{r, warning=FALSE, include=FALSE}
library(tidyverse)
library(here)
library(readxl)
library(RColorBrewer)
library(pixiedust)

library(survival)
library(survminer)

here::i_am("paper/notebooks/_data.qmd")
```

```{r, warning=FALSE, include=FALSE}
colorscheme_brewer <- function(x, palname) {
  a <- brewer.pal(length(unique(na.omit(x))), palname)
  names(a) <- unique(na.omit(sort(x)))
  return(a)
}
```

```{r, warning=FALSE, include=FALSE}
# COLOR MAPS

palette_tilclust <- c('TIL-poor'='#324376',
                      'TIL-rich'='#F76C5E')

palette_cohort <- c("Cross Canada"="#D90368",
                    "Historic Vancouver"="#7F95D1")

palette_nodes <- c("-"="#E6EBE0", 
                   "+"="#36C9C6")

palette_binary <- c('Yes'="#2E282A", 
                    'No'="#E7ECEF")
palette_tma <- c("10-005"="#88A096",
                 "10-006"="#BBAB8B",
                 "22-004"="#8A4F7D")

hist_mapping <- c("endometrioid (squamous)" = "endometrioid", 
                  "mixed endometrioid and serous" = "mixed", 
                  "mixed serous and moderately differentiated" = "mixed",
                  "undifferentiated" = "other",
                  "dedifferentiated" = "other")
```

```{r, warning=FALSE, include=FALSE}
# Clinical
clinical_data_path <- here::here("data", "processed", "clinical_data.tsv")

# B & T 
bt_data_path <- here::here("data", "processed", "bt_labeled.tsv")

# Adaptive resistance 
ar_pheno_data_path <- here::here("data", "processed", "ar_pheno_labeled.tsv")
ar_area_data_path <- here::here("data", "processed", "ar_area_labeled.tsv")

# Angio (areas only now)
angio_data_path <- here::here("data", "processed", "angio_labeled.tsv")
```


```{r, warning=FALSE, include=FALSE}
clinical <- read_tsv(clinical_data_path)
clinical <- clinical %>%
  dplyr::mutate(
    grade_rev=str_extract(grade_rev, "[0-9]+")
  )

bt <- read_tsv(bt_data_path)

ar_pheno <- read_tsv(ar_pheno_data_path)
ar_area <- read_tsv(ar_area_data_path)

angio <- read_tsv(angio_data_path)
```

```{r, warning=FALSE, include=FALSE}
# Remove redundant or useless columns
bt <- bt %>%
  select(-c(notes, area_tumour_pct, area_stroma_pct, area_tissue_mm, block)) %>%
  # Remove density columns
  select(-colnames(bt)[str_detect(colnames(bt), "^dens")])

ar_pheno <- ar_pheno %>%
  select(-c(block)) 

ar_area <- ar_area %>%
  select(-c(block)) 

angio <- angio %>%
  select(-c(block))

# Remove rows with no entries
bt_clean <- bt[complete.cases(bt),]
ar_pheno_clean <- ar_pheno[complete.cases(ar_pheno),]
ar_area_clean <- ar_area[complete.cases(ar_area),]
angio_clean <- angio[complete.cases(angio),]
```


```{r, warning=FALSE, include=FALSE}
metatable_bt <- bt %>%
  dplyr::select(tma, acc_num) %>%
  mutate(`B & T` = TRUE,
         tma=str_replace_all(tma, "[AB]$", "")) %>%
  unique %>%
  rename(TMA=tma) %>%
  mutate(
    TMA = factor(TMA, levels = c("10-005", "10-006", "22-004"))
  )
  

metatable_angio <- angio %>%
  dplyr::select(tma, acc_num) %>%
  mutate(angiogenesis = TRUE,
         tma=str_replace_all(tma, "[AB]$", "")) %>%
  unique %>%
  rename(TMA=tma) %>%
  mutate(
    TMA = factor(TMA, levels = c("10-005", "10-006", "22-004"))
  )

metatable_ar <- ar_pheno %>%
  dplyr::select(tma, acc_num) %>%
  mutate(`Adaptive Resistance` = TRUE,
         tma=str_replace_all(tma, "[AB]$", "")) %>%
  unique %>%
  rename(TMA=tma) %>%
  mutate(
    TMA = factor(TMA, levels = c("10-005", "10-006", "22-004"))
  )

metatable_ar_area <- ar_area %>%
  dplyr::select(tma, acc_num) %>%
  mutate(`Adaptive Resistance` = TRUE,
         tma=str_replace_all(tma, "[AB]$", "")) %>%
  unique %>%
  rename(TMA=tma) %>%
  mutate(
    TMA = factor(TMA, levels = c("10-005", "10-006", "22-004"))
  )

metatable_clinical <- clinical %>%
  dplyr::select(cohort, acc_num, age_dx, eclass2_ngs, stage_full, stage_main, grade_rev, hist_rev, lvi, nodes, myo, neoadj, chemo, rt, brachy) %>%
  unique %>%
  rename(Cohort=cohort, Subtype=eclass2_ngs, Age=age_dx, Stage=stage_main, Grade=grade_rev, Histotype=hist_rev,
         LVI=lvi, Nodes=nodes, Myo=myo, Neoadjuvant=neoadj, Chemotherapy=chemo, Radiotherapy=rt, Brachytherapy=brachy) %>%
  mutate(
    LVI = dplyr::recode(LVI, 'negative'='-', 'positive'='+ (unspecified)', 'focal'='+ (focal)', 'extensive'='+ (extensive)'),
    Nodes = dplyr::recode(Nodes, 'negative'='-', 'positive'='+')
  ) %>%
  mutate(
    Grade = factor(Grade, levels = c("1", "2", "3")),
    LVI = factor(LVI, levels = c("-", "+ (unspecified)", "+ (focal)", "+ (extensive)")),
    Nodes = factor(Nodes, levels = c("-", "+")),
    Myo = factor(Myo, levels = c("none", "1-50%", ">50%")),
    Neoadjuvant = factor(Neoadjuvant, levels = c("chemo only", "horm only", "RT only", "yes/NOS", "none")),
    Chemotherapy = factor(dplyr::recode(as.character(Chemotherapy), 'FALSE'='No', 'TRUE'='Yes'), levels = c('Yes', 'No')),
    Radiotherapy = factor(dplyr::recode(as.character(Radiotherapy), 'FALSE'='No', 'TRUE'='Yes'), levels = c('Yes', 'No')),
    Brachytherapy = factor(dplyr::recode(as.character(Brachytherapy), 'FALSE'='No', 'TRUE'='Yes'), levels = c('Yes', 'No')),
    Stage = factor(Stage, levels = c("I", "II", "III", "IV")),
    Histotype = case_when(
      Histotype %in% names(hist_mapping) ~ hist_mapping[Histotype],
      TRUE ~ Histotype)
  )

metatable_full <- metatable_bt %>%
  #full_join(metatable_angio) %>%
  full_join(metatable_clinical) %>%
  full_join(metatable_ar) %>%
  mutate(
    #angiogenesis = replace_na(angiogenesis, FALSE),
    `B & T` = replace_na(`B & T`, FALSE),
    `Adaptive Resistance` = replace_na(`Adaptive Resistance`, FALSE)
  ) %>%
  filter(!is.na(TMA), !is.na(acc_num)) %>%
  dplyr::select(-c(stage_full)) %>%
  #rename(Angiogenesis=angiogenesis) %>%
  mutate(
    `B & T` = factor(dplyr::recode(as.character(`B & T`), 'FALSE'='No', 'TRUE'='Yes'), levels = c('Yes', 'No')),
    #Angiogenesis = factor(dplyr::recode(as.character(Angiogenesis), 'FALSE'='No', 'TRUE'='Yes'), levels = c('Yes', 'No')),
    `Adaptive Resistance` = factor(dplyr::recode(as.character(`Adaptive Resistance`), 'FALSE'='No', 'TRUE'='Yes'), levels = c('Yes', 'No'))
  ) %>%
  arrange(TMA, Subtype, Cohort) %>%
  filter(Subtype == "p53abn",
         Neoadjuvant == "none")
```

```{r, warning=FALSE, include=FALSE}
palette_stage <- colorscheme_brewer(metatable_clinical$Stage, 'Reds')
palette_grade <- colorscheme_brewer(metatable_clinical$Grade, 'Oranges')
palette_lvi <- colorscheme_brewer(metatable_clinical$LVI, 'Purples')
palette_histotype <- colorscheme_brewer(metatable_clinical$Histotype, 'Set3')
palette_subtype <- colorscheme_brewer(metatable_clinical$Subtype, 'Set2')
palette_myo <- colorscheme_brewer(metatable_clinical$Myo, 'Reds')
palette_neoadjuvant <- colorscheme_brewer(metatable_clinical$Neoadjuvant, 'Set2')
```

```{r, warning=FALSE, include=FALSE}
bt_long <- bt_clean %>%
  # Pivot on count columns
  pivot_longer(cols = all_of(colnames(bt_clean)[str_detect(colnames(bt_clean), "^(count)")]), 
               names_to = "variable", 
               values_to = "value") %>%
  mutate(
    panel = "B&T",
    row = as.character(row),
    col = as.character(col)
  )

ar_pheno_long <- ar_pheno_clean %>%
  # Pivot on the count columns
  pivot_longer(cols = all_of(colnames(ar_pheno_clean)[str_detect(colnames(ar_pheno_clean), "^(count)")]), 
               names_to = "variable", 
               values_to = "value") %>%
  mutate(
    panel = "AR",
    row = as.character(row),
    col = as.character(col)
  )

ar_area_long <- ar_area_clean %>%
  # Pivot on the count columns
  pivot_longer(cols = all_of(colnames(ar_area_clean)[str_detect(colnames(ar_area_clean), "^(area_pdl1)")]), 
               names_to = "variable", 
               values_to = "value") %>%
  mutate(
    panel = "AR",
    row = as.character(row),
    col = as.character(col)
  )

angio_long <- angio_clean %>%
  pivot_longer(cols = all_of(colnames(angio_clean)[str_detect(colnames(angio_clean), "^(area)")]),
               names_to = "variable",
               values_to = "value") %>%
  mutate(
    panel = "angio",
    row = as.character(row),
    col = as.character(col)
  )

clinical_long <- clinical %>%
  pivot_longer(
    cols = c(starts_with("os"), starts_with("pfs"), starts_with("dss")),
    names_to = c("outcome", ".value"),
    names_sep = "_"
  ) %>%
  mutate(sts = str_extract(sts, "(?<=\\.).*"),
         yrs = as.numeric(yrs),
         sts = (sts == "event")) %>%
  filter(!is.na(yrs)) %>%
  rename(time=yrs,
         status=sts) %>%
  ## time == 0 not allowed in cox model
  filter(time > 0)
```

```{r, warning=FALSE, include=FALSE}
counts_long <- bt_long %>%
  bind_rows(ar_pheno_long)

counts_long <- counts_long %>%
  mutate(area_region_mm=ifelse(str_detect(variable, "tumour"),
                               area_tumour_mm,
                               area_stroma_mm),
         region=str_extract(variable, "(tumour|stroma)$"),
         variable=str_replace(variable, "^count_", ""),
         variable=str_replace(variable, "_(tumour|stroma)$", ""))
```


```{r, warning=FALSE, include=FALSE}
counts_summarized <- counts_long %>%
  group_by(tma, acc_num, panel, variable, region) %>%
  summarise(
    value = sum(value),
    area_region_mm = sum(area_region_mm)
  ) %>%
  ungroup()

counts_summarized <- counts_summarized %>%
  mutate(
    density = value/area_region_mm
  )

counts_final <- counts_summarized %>%
  group_by(acc_num, panel, variable, region) %>%
  summarise(
    value = sum(value),
    area_region_mm = sum(area_region_mm)
  ) %>%
  ungroup() %>%
  mutate(
    density = value/area_region_mm
  )

densities_final <- counts_final %>%
  mutate(log_density = log1p(density),
         variable_full = paste0(variable, "_", region))

densities_final_wide <- densities_final %>%
  dplyr::filter(panel == "B&T",
                variable != "cd8tcell_foxp3pos") %>%
  select(-c(value, area_region_mm, density, panel, variable, region)) %>%
  pivot_wider(names_from = variable_full, values_from = log_density)

density_final_input <- densities_final_wide %>% 
  rename(
    `Stromal: Plasma`=bcell_cd20neg_stroma,
    `Epithelial: Plasma`=bcell_cd20neg_tumour,
    `Stromal: B`=bcell_cd20pos_stroma,
    `Epithelial: B`=bcell_cd20pos_tumour,
    `Stromal: Treg`=treg_stroma,
    `Epithelial: Treg`=treg_tumour,
    `Stromal: CD8+ T`=tcyto_stroma,
    `Epithelial: CD8+ T`=tcyto_tumour,
    `Stromal: T helper`=thelper_stroma,
    `Epithelial: T helper`=thelper_tumour
  ) %>%
  column_to_rownames("acc_num") %>%
  as.matrix
```

```{r}
ar_area_long <- ar_area_long %>%
  mutate(area_region_mm=ifelse(str_detect(variable, "tumour"),
                               area_tumour_mm,
                               area_stroma_mm),
         region=str_extract(variable, "(tumour|stroma)$"),
         variable=str_replace(variable, "^area_", ""),
         variable=str_replace(variable, "_(tumour|stroma)$", ""))


ar_area_summarized <- ar_area_long %>%
  group_by(acc_num, panel, variable, region) %>% 
  summarise(
    value = sum(value),
    area_region_mm = sum(area_region_mm)
  ) %>%
  ungroup()

ar_area_final <- ar_area_summarized %>%
  group_by(acc_num, region, panel) %>%
  summarise(
    pdl1pos_ido1neg_nonmac_prop=value[variable == "pdl1pos_ido1neg_cd68neg"]/(value[variable == "pdl1pos_ido1neg_cd68neg"] + value[variable == "pdl1neg_ido1neg_cd68neg"] + value[variable == "pdl1pos_ido1pos_cd68neg"] + value[variable == "pdl1neg_ido1pos_cd68neg"]),
    pdl1neg_ido1pos_nonmac_prop=value[variable == "pdl1neg_ido1pos_cd68neg"]/(value[variable == "pdl1pos_ido1neg_cd68neg"] + value[variable == "pdl1neg_ido1neg_cd68neg"] + value[variable == "pdl1pos_ido1pos_cd68neg"] + value[variable == "pdl1neg_ido1pos_cd68neg"]),
    pdl1pos_ido1pos_nonmac_prop=value[variable == "pdl1pos_ido1pos_cd68neg"]/(value[variable == "pdl1pos_ido1neg_cd68neg"] + value[variable == "pdl1neg_ido1neg_cd68neg"] + value[variable == "pdl1pos_ido1pos_cd68neg"] + value[variable == "pdl1neg_ido1pos_cd68neg"]),
    pdl1neg_ido1neg_nonmac_prop=value[variable == "pdl1neg_ido1neg_cd68neg"]/(value[variable == "pdl1pos_ido1neg_cd68neg"] + value[variable == "pdl1neg_ido1neg_cd68neg"] + value[variable == "pdl1pos_ido1pos_cd68neg"] + value[variable == "pdl1neg_ido1pos_cd68neg"])
  ) %>%
  ungroup()
```

```{r, warning=FALSE, include=FALSE}
## NEEDS TO BE RERUN ON ONLY THE B&T PANEL
trace_subdir <- "traces_aggregate"

read_trace_table <- function(fname) {
  x <- read_tsv(fname)
  colnames(x)[1] <- "iter"
  x <- x %>%
    pivot_longer(cols = -iter,
                 names_to = "variable",
                 values_to = "value")
  return(x)
}

read_clust_assignments <- function(fname) {
  x <- read_tsv(fname)
  x <- x[,2:ncol(x)]
  x <- x %>%
    pivot_longer(cols = -acc_num, 
                 names_to = "iter", 
                 values_to = "clust")
  return(x)
}

trace_table <- read_trace_table(here::here("results", "survival_cluster", trace_subdir, "overall_trace_table.tsv"))

# trace_tables <- list(
#   'os'=read_tsv(here::here("results", "survival_cluster", trace_subdir, "os_trace_table.tsv")),
#   'pfs'=read_tsv(here::here("results", "survival_cluster", trace_subdir, "pfs_trace_table.tsv")),
#   'dss'=read_tsv(here::here("results", "survival_cluster", trace_subdir, "dss_trace_table.tsv"))
#   #'test'=read_tsv(here::here("results", "survival_cluster", "traces", "test_trace_table.tsv"))
# ) %>%
#   lapply(
#     function(x) {
#       colnames(x)[1] <- "iter"
#       x <- x %>%
#         pivot_longer(cols = -iter, 
#                      names_to = "variable", 
#                      values_to = "value")
#       return(x)
#     }
#   )

clust_assignments <- read_clust_assignments(here::here("results", "survival_cluster", trace_subdir, "overall_cluster_assignments.tsv"))

# clust_assignments <- list(
#   'os'=read_tsv(here::here("results", "survival_cluster", trace_subdir, "os_cluster_assignments.tsv")),
#   'pfs'=read_tsv(here::here("results", "survival_cluster", trace_subdir, "pfs_cluster_assignments.tsv")),
#   'dss'=read_tsv(here::here("results", "survival_cluster", trace_subdir, "dss_cluster_assignments.tsv"))
#   #'test'=read_tsv(here::here("results", "survival_cluster", "traces", "test_cluster_assignments.tsv"))
# ) %>%
#   lapply(
#     function(x) {
#       x <- x[,2:ncol(x)]
#       x <- x %>%
#         pivot_longer(cols = -acc_num, 
#                      names_to = "iter", 
#                      values_to = "clust")
#       return(x)
#     }
#   )

# trace_tables_merged <- lapply(names(trace_tables), function(x) {
#   df <- trace_tables[[x]]
#   df$outcome <- x
#   return(df)
# }) %>% 
#   bind_rows()
# 
# clust_assignments_merged <- lapply(names(clust_assignments), function(x) {
#   df <- clust_assignments[[x]]
#   df$outcome <- x
#   return(df)
# }) %>% 
#   bind_rows()

clust_assignments_summarized <- clust_assignments %>%
  group_by(acc_num, clust) %>%
  summarise(count=n()) %>%
  ungroup() %>%
  arrange(acc_num, clust)

total_iters <- clust_assignments_summarized %>%
  group_by(acc_num) %>%
  summarise(total_count=sum(count)) %>%
  ungroup()

clust_assignments_summarized <- clust_assignments_summarized %>%
  left_join(total_iters) %>%
  mutate(count_pct=count/total_count)

clust_assignments_map <- clust_assignments_summarized %>%
  group_by(acc_num) %>%
  summarise(
    clust_map=clust[which.max(count)],
    count_pct=max(count_pct)
  ) %>%
  mutate(
    clust_map = dplyr::recode(clust_map, '0'='TIL-rich', '1'='TIL-poor') %>%
      factor(levels = c("TIL-poor", "TIL-rich"))
  )

# clust_assignments_map_comb_outcomes <- clust_assignments_summarized %>%
#   #filter(outcome == "test") %>%
#   group_by(acc_num, clust) %>%
#   summarise(
#     count=sum(count),
#     total_count=sum(total_count),
#     count_pct=count/total_count
#   ) %>%
#   ungroup() %>%
#   group_by(acc_num) %>%
#   summarise(
#     clust_map=clust[which.max(count)],
#     count_pct=max(count_pct)
#   ) %>%
#   ungroup() %>%
#   mutate(clust_map=factor(clust_map, levels = as.character(sort(unique(clust_map)))))

clinical_long_clust_assignments <- clinical_long %>%
  dplyr::inner_join(clust_assignments_map) %>%
  select(-c(core_id, tma)) %>% 
  unique
```

```{r, warning=FALSE, include=FALSE}
unique_outcomes <- c("os", "pfs", "dss")

cox_fits <- lapply(unique_outcomes, function(x) {
  df <- clinical_long_clust_assignments %>% 
    filter(outcome == x) %>%
    rename(
      Age=age_dx,
      TIL=clust_map,
      Chemotherapy=chemo,
      Radiotherapy=rt,
      Brachytherapy=brachy,
      Stage=stage_main
    ) %>%
    mutate(
      TIL=factor(TIL, labels = c("TIL-poor", "TIL-rich"))
    )
  cox_fit <- coxph(Surv(time, status) ~  Age + TIL + Chemotherapy + Radiotherapy + Brachytherapy + Stage, data = df)
  
  return(cox_fit)
})
names(cox_fits) <- unique_outcomes

cox_fits_cs <- lapply(unique_outcomes, function(x) {
  df <- clinical_long_clust_assignments %>% 
    filter(outcome == x) %>%
    mutate(
      Carcinosarcoma = (hist_rev == "carcinosarcoma (MMMT)")
    ) %>%
    rename(
      Age=age_dx,
      TIL=clust_map,
      Chemotherapy=chemo,
      Radiotherapy=rt,
      Brachytherapy=brachy,
      Stage=stage_main
    ) %>%
    mutate(
      TIL=factor(TIL, labels = c("TIL-poor", "TIL-rich"))
    )
  cox_fit <- coxph(Surv(time, status) ~  Age + TIL + Chemotherapy + Radiotherapy + Brachytherapy + Stage + Carcinosarcoma, data = df)
  
  return(cox_fit)
})
names(cox_fits_cs) <- unique_outcomes

clinical_til_densities <- clinical_long_clust_assignments %>% 
  dplyr::inner_join(density_final_input %>% as.data.frame %>% rownames_to_column("acc_num"))

cox_fits_by_tiltype <- lapply(unique_outcomes, function(x) {
  df <- clinical_til_densities %>% 
    filter(outcome == x) %>%
    rename(
      Age=age_dx,
      TIL=clust_map,
      Chemotherapy=chemo,
      Radiotherapy=rt,
      Brachytherapy=brachy,
      Stage=stage_main
    )
  
  res <- lapply(colnames(density_final_input), function(tiltype) {
    cox_fit <- coxph(as.formula(paste0("Surv(time, status) ~  Age + Chemotherapy + Radiotherapy + Brachytherapy + Stage + `", tiltype, "`")), data = df)
    return(cox_fit)
  })
  names(res) <- colnames(density_final_input)
  return(res)
})
names(cox_fits_by_tiltype) <- unique_outcomes

# max_iter <- length(unique(trace_tables_merged$iter))
# 
# cox_hazards <- trace_tables_merged %>%
#   group_by(outcome, variable) %>%
#   summarise(
#     log.estimate=mean(value),
#     log.conf.low=quantile(value, 0.025),
#     log.conf.high=quantile(value, 0.975),
#     p.value=min(sum(value >= 0)/length(value), sum(value <= 0)/length(value))
#   ) %>%
#   ungroup() %>%
#   mutate(
#       estimate=exp(log.estimate),
#       conf.low=exp(log.conf.low),
#       conf.high=exp(log.conf.high)
#     )
# 
# cox_hazards_renamed <- cox_hazards %>%
#   mutate(variable = str_replace(variable, "^beta_", "")) %>%
#   filter(!variable %in% c("clust_0", "stage_0")) %>%
#   filter(!str_detect(variable, "^props")) %>%
#   mutate(category = case_when(
#     str_detect(variable, "^stage") ~ "Stage",
#     TRUE ~ "")) %>%
#   mutate(variable = dplyr::recode(variable, 
#                            clust_1 = "High TIL",
#                            clust_2 = "Low TIL",
#                            stage_1 = "II",
#                            stage_2 = "III",
#                            stage_3 = "IV",
#                            chemo = "Chemotherapy",
#                            brachy = "Brachytherapy",
#                            rt = "Radiotherapy",
#                            age = "Age")) %>%
#   mutate(variable = factor(variable, levels = c("Age", "High TIL", "Low TIL", "Chemotherapy", "Brachytherapy", "Radiotherapy", "II", "III", "IV"))) %>%
#   arrange(outcome, variable)


# cox_fits_pdl1 <- lapply(unique_outcomes, function(x) {
#   df <- clinical_long_clust_assignments %>% 
#     dplyr::left_join(ar_area_final_tumor) %>%
#     dplyr::mutate(pdl1_tumor=pdl1pos_ido1pos_nonmac_prop + pdl1pos_ido1neg_nonmac_prop,
#                   ido1_tumor=pdl1neg_ido1pos_nonmac_prop + pdl1pos_ido1pos_nonmac_prop) %>%
#     filter(outcome == x) %>%
#     rename(
#       Age=age_dx,
#       TIL=clust_map,
#       Chemotherapy=chemo,
#       Radiotherapy=rt,
#       Brachytherapy=brachy,
#       Stage=stage_main
#     ) %>%
#     mutate(
#       TIL=factor(TIL, labels = c("Low TIL", "High TIL"))
#     )
#   cox_fit <- coxph(Surv(time, status) ~  Age + ido1_tumor + Chemotherapy + Radiotherapy + Brachytherapy + Stage, data = df)
#   
#   return(cox_fit)
# })
# names(cox_fits_pdl1) <- unique_outcomes
```

```{r}
unique_outcomes <- c("os", "pfs", "dss")
unique_stage <- c("I", "II", "III", "IV", "all")

km_fits <- lapply(unique_outcomes, function(x) {
  tmp <- lapply(unique_stage, function(stage) {
    if (stage == "all") {
      df <- clinical_long_clust_assignments %>% filter(outcome == x, stage_main %in% c("I", "II", "III", "IV"))
    } else {
      df <- clinical_long_clust_assignments %>% filter(outcome == x, stage_main == stage)
    }
    fit <- survfit(Surv(time, status) ~ clust_map, 
                   data = df)
    pval <- surv_pvalue(fit, data = df)
    plot <- ggsurvplot(fit,
                       data = df,
                       pval = FALSE,
                       pval.method = FALSE,
                       conf.int = TRUE,
                       risk.table = TRUE, 
                       title = paste0("Stage ", stage, " (n=", length(unique(intersect(df$acc_num, metatable_full$acc_num))), ", ", str_replace_all(str_replace_all(pval$pval.txt, " ", ""), "p", "*P*"), ")"),
                       legend = "none",
                       palette = unname(palette_tilclust),
                       xlim = c(0, 13),
                       break.x.by = 3,
                       ggtheme = theme_pubr())
    return(list(fit=fit, plot=plot$plot + theme(plot.title = ggtext::element_markdown(hjust = 0.5)), pval=pval))
  })
  names(tmp) <- unique_stage
  return(tmp)
})
names(km_fits) <- unique_outcomes
```

```{r}
unique_chemo <- c(FALSE, TRUE)
km_chemo_fits <- lapply(unique_outcomes, function(x) {
  tmp <- lapply(unique_chemo, function(chemo_opt) {
    df <- clinical_long_clust_assignments %>% filter(outcome == x, stage_main %in% c("I", "II", "III", "IV"), chemo == chemo_opt)
    fit <- survfit(Surv(time, status) ~ clust_map, 
                   data = df)
    pval <- surv_pvalue(fit, data = df)
    if (chemo_opt) {
      plot_title <- "Chemotherapy"
    } else {
      plot_title <- "No chemotherapy"
    }
    plot <- ggsurvplot(fit,
                       data = df,
                       pval = FALSE,
                       pval.method = FALSE,
                       conf.int = TRUE,
                       risk.table = TRUE, 
                       title = paste0(plot_title, " (n=", length(unique(intersect(df$acc_num, metatable_full$acc_num))), ", ", str_replace_all(str_replace_all(pval$pval.txt, " ", ""), "p", "*P*"), ")"),
                       legend = "none",
                       palette = unname(palette_tilclust),
                       xlim = c(0, 13),
                       break.x.by = 3,
                       ggtheme = theme_pubr())
    return(list(fit=fit, plot=plot$plot + theme(plot.title = ggtext::element_markdown(hjust = 0.5)), pval=pval))
  })
  names(tmp) <- unique_chemo
  return(tmp)
})
names(km_chemo_fits) <- unique_outcomes
```


```{r}
km_stage_chemo_fits <- lapply(unique_outcomes, function(x) {
  tmp1 <- lapply(c("I", "II", "III", "IV"), function(stage_opt) {
    tmp <- lapply(unique_chemo, function(chemo_opt) {
      df <- clinical_long_clust_assignments %>% filter(outcome == x, stage_main == stage_opt, chemo == chemo_opt)
      fit <- survfit(Surv(time, status) ~ clust_map, 
                     data = df)
      pval <- surv_pvalue(fit, data = df)
      plot <- ggsurvplot(fit,
                         data = df,
                         pval = FALSE,
                         pval.method = FALSE,
                         conf.int = TRUE,
                         risk.table = TRUE, 
                         title = paste0("Stage ", stage_opt, " Chemo ", chemo_opt, " (n=", length(unique(intersect(df$acc_num, metatable_full$acc_num))), ", ", str_replace_all(pval$pval.txt, " ", ""), ")"),
                         legend = "none",
                         palette = unname(palette_tilclust),
                         xlim = c(0, 13),
                         break.x.by = 3,
                         ggtheme = theme_pubr())
      return(list(fit=fit, plot=plot$plot + theme(plot.title = element_text(hjust = 0.5)), pval=pval))
    })
    names(tmp) <- unique_chemo
    return(tmp)
  })
  names(tmp1) <- c("I", "II", "III", "IV")
  return(tmp1)
})
names(km_stage_chemo_fits) <- unique_outcomes
```

```{r}
unique_rt <- c(FALSE, TRUE)
km_stage_rt_fits <- lapply(unique_outcomes, function(x) {
  tmp1 <- lapply(c("I", "II", "III", "IV"), function(stage_opt) {
    tmp <- lapply(unique_rt, function(rt_opt) {
      df <- clinical_long_clust_assignments %>% filter(outcome == x, stage_main == stage_opt, rt == rt_opt)
      fit <- survfit(Surv(time, status) ~ clust_map, 
                     data = df)
      pval <- surv_pvalue(fit, data = df)
      plot <- ggsurvplot(fit,
                         data = df,
                         pval = FALSE,
                         pval.method = FALSE,
                         conf.int = TRUE,
                         risk.table = TRUE, 
                         title = paste0("Stage ", stage_opt, " RT ", rt_opt, " (n=", length(unique(intersect(df$acc_num, metatable_full$acc_num))), ", ", str_replace_all(pval$pval.txt, " ", ""), ")"),
                         legend = "none",
                         palette = unname(palette_tilclust),
                         xlim = c(0, 13),
                         break.x.by = 3,
                         ggtheme = theme_pubr())
      return(list(fit=fit, plot=plot$plot + theme(plot.title = element_text(hjust = 0.5)), pval=pval))
    })
    names(tmp) <- unique_rt
    return(tmp)
  })
  names(tmp1) <- c("I", "II", "III", "IV")
  return(tmp1)
})
names(km_stage_rt_fits) <- unique_outcomes
```


```{r, warning=FALSE, include=FALSE}
cnsig_dir <- here::here("data", "raw", "huntsman_cn_signatures", "OneDrive_1_9-18-2023")

cnsig_exposures_file <- file.path(cnsig_dir, "agglomerated_exposures_table.csv")
gene_files <- file.path(cnsig_dir, paste0(c("BRCA1", "BRCA2", "CCNE1", "HER2", "TP53"), ".csv"))
gene_mutation_files <- file.path(cnsig_dir, paste0(c("BRCA1", "BRCA2"), "_targeted_panel_seq.csv"))
ploidy_cellularity_file <- file.path(cnsig_dir, "30kb_aCNsolutions_20230722_196_filtered.csv")
her2_ihc_file <- file.path(cnsig_dir, "HER2_IHC_Track.xlsx")
p53abn_cohort_track_file <- file.path(cnsig_dir, "p53abn_cohort_metadata.xlsx")

cnsig_exposures <- read_csv(cnsig_exposures_file)
colnames(cnsig_exposures)[1] <- "sample"
cnsig_exposures <- cnsig_exposures %>% 
  filter(!str_detect(sample, "^(IM|JBLAB)")) %>%
  mutate(sample = str_replace_all(sample, "\\.", "-")) %>%
  mutate(id = case_when(
    str_detect(sample, "^VS") ~ str_extract(sample, "[^-]*\\-[^-]*"),
    str_detect(sample, "^CC") ~  str_replace(sample, "\\-T$", ""),
    str_detect(sample, "^VOA") ~ str_replace(sample, "[A-Z]*$", "")
  ))

gene_cn_status <- lapply(gene_files, function(x) {
  read_csv(x)
}) %>% bind_rows() %>% 
  filter(!str_detect(sample, "^(IM|JBLAB)")) %>%
  mutate(sample = str_replace_all(sample, "\\.", "-")) %>%
  mutate(id = case_when(
    str_detect(sample, "^VS") ~ str_extract(sample, "[^-]*\\-[^-]*"),
    str_detect(sample, "^CC") ~  str_replace(sample, "\\-T$", ""),
    str_detect(sample, "^VOA") ~ str_replace(sample, "[A-Z]*$", "")
  )) %>%
  mutate(classification = factor(classification, levels = c("High Amplification", "Amplification", "Gain", "Normal", "Loss", "No Data")))

gene_mut_status <- lapply(gene_mutation_files, function(x) {
  read_csv(x)
}) %>% bind_rows() %>% 
  filter(!str_detect(sample, "^(IM|JBLAB)")) %>%
  mutate(sample = str_replace_all(sample, "\\.", "-")) %>%
  mutate(id = case_when(
    str_detect(sample, "^VS") ~ str_extract(sample, "[^-]*\\-[^-]*"),
    str_detect(sample, "^CC") ~  str_replace(sample, "\\-T$", ""),
    str_detect(sample, "^VOA") ~ str_replace(sample, "[A-Z]*$", "")
  )) %>%
  mutate(classification = factor(classification, levels = c("Present", "Absent", "No Data")))

ploidy_cellularity <- read_csv(ploidy_cellularity_file) %>%
  filter(!str_detect(sample, "^(IM|JBLAB)")) %>%
  mutate(sample = str_replace_all(sample, "\\.", "-")) %>%
  mutate(id = case_when(
    str_detect(sample, "^VS") ~ str_extract(sample, "[^-]*\\-[^-]*"),
    str_detect(sample, "^CC") ~  str_replace(sample, "\\-T$", ""),
    str_detect(sample, "^VOA") ~ str_replace(sample, "[A-Z]*$", "")
  ))

her2_ihc <- read_xlsx(her2_ihc_file) %>%
  rename(sample=samples_id, her2_ihc=`IHC score`, her2_percent_pos=`% when 2 /3+`) %>%
  filter(!str_detect(sample, "^(IM|JBLAB)")) %>%
  mutate(id = case_when(
    str_detect(sample, "^VS") ~ str_extract(sample, "[^-]*\\-[^-]*"),
    str_detect(sample, "^CC") ~  str_replace(sample, "\\-T$", ""),
    str_detect(sample, "^VOA") ~ str_replace(sample, "[A-Z]*$", "")
  )) %>%
  mutate(her2_ihc = factor(her2_ihc, levels = c(0, 1, 2, 3))) %>%
  select(sample, id, her2_ihc, her2_percent_pos, sWGS, ploidy)

p53abn_cohort_track <- read_xlsx(p53abn_cohort_track_file) %>%
  rename(sample=sample_id) %>%
  filter(!str_detect(sample, "^(IM|JBLAB)")) %>%
  mutate(id = case_when(
    str_detect(sample, "^VS") ~ str_extract(sample, "[^-]*\\-[^-]*"),
    str_detect(sample, "^CC") ~  str_replace(sample, "\\-T$", ""),
    str_detect(sample, "^VOA") ~ str_replace(sample, "[A-Z]*$", "")
  ))


correct_identifiers <- clinical %>%
  select(patient_id, study_id, acc_num) %>%
  unique

## Fix seemingly arbitrary identifier usage made by collaborators
merge_on_all_identifiers <- function(df, identifiers) {
  identifiers_subset <- identifiers %>%
    filter(patient_id %in% df$id | study_id %in% df$id | acc_num %in% df$id) %>%
    mutate(id = case_when(
      patient_id %in% df$id ~ patient_id,
      study_id %in% df$id ~ study_id,
      acc_num %in% df$id ~ acc_num
    ))
  
  df <- df %>%
    inner_join(identifiers_subset) %>%
    select(-c(sample, id)) %>%
    select(patient_id, study_id, acc_num, everything())
  
  return(df)
}

cnsig_exposures <- merge_on_all_identifiers(cnsig_exposures, correct_identifiers)
gene_cnvs <- merge_on_all_identifiers(gene_cn_status, correct_identifiers)
gene_muts <- merge_on_all_identifiers(gene_mut_status, correct_identifiers)
ploidy_cellularity <- merge_on_all_identifiers(ploidy_cellularity, correct_identifiers)
her2_ihc <- merge_on_all_identifiers(her2_ihc, correct_identifiers)
p53abn_cohort_track <- merge_on_all_identifiers(p53abn_cohort_track, correct_identifiers)

# Note: tried a few additional analyses that didn't show significant results, including CCNE1 CNV <=> clust_map, p53abn IHC and mutation type <=> clust_map
```

```{r}
her2_ihc_clust_assignments <- clust_assignments_map %>%
  inner_join(her2_ihc) %>%
  inner_join(metatable_full) %>%
  filter(Subtype == "p53abn")
```


